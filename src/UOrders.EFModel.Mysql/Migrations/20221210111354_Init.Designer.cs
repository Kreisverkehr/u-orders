// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UOrders.EFModel;

#nullable disable

namespace UOrders.EFModel.Mysql.Migrations
{
    [DbContext(typeof(UOrdersDbContext))]
    [Migration("20221210111354_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UOrders.EFModel.LocalizedText", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("MenuCategoryDescriptionID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuCategoryTitleID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemDescriptionID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemOptionDescriptionID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemOptionNameID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemOptionValueNameID")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemTitleID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("MenuCategoryDescriptionID");

                    b.HasIndex("MenuCategoryTitleID");

                    b.HasIndex("MenuItemDescriptionID");

                    b.HasIndex("MenuItemOptionDescriptionID");

                    b.HasIndex("MenuItemOptionNameID");

                    b.HasIndex("MenuItemOptionValueNameID");

                    b.HasIndex("MenuItemTitleID");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ToBeRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("ToBeRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemID")
                        .HasColumnType("int");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<bool>("ToBeRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemID");

                    b.ToTable("MenuItemOptions");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOptionValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MenuItemOptionID")
                        .HasColumnType("int");

                    b.Property<bool>("ToBeRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemOptionID");

                    b.ToTable("MenuItemOptionValues");
                });

            modelBuilder.Entity("UOrders.EFModel.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderedById")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTimeOffset>("OrderedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ReviewToken")
                        .HasColumnType("char(36)");

                    b.HasKey("ID");

                    b.HasIndex("OrderedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderItemCheckedOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OptionValueID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OptionValueID");

                    b.HasIndex("OrderItemID");

                    b.ToTable("OrderItemCheckedOptions");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderReview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal?>("StarRating")
                        .IsRequired()
                        .HasPrecision(2, 1)
                        .HasColumnType("decimal(2,1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderReviews");
                });

            modelBuilder.Entity("UOrders.EFModel.Price", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemOptionValuePrice")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemPrice")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasPrecision(9, 4)
                        .HasColumnType("decimal(9,4)");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemOptionValuePrice");

                    b.HasIndex("MenuItemPrice");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("UOrders.EFModel.UOrdersUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<bool>("ConfirmationEmailSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UOrders.EFModel.UOrdersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UOrders.EFModel.UOrdersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UOrders.EFModel.UOrdersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UOrders.EFModel.UOrdersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UOrders.EFModel.LocalizedText", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuCategory", "MenuCategoryDescription")
                        .WithMany("Description")
                        .HasForeignKey("MenuCategoryDescriptionID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuCategory", "MenuCategoryTitle")
                        .WithMany("Title")
                        .HasForeignKey("MenuCategoryTitleID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItem", "MenuItemDescription")
                        .WithMany("Description")
                        .HasForeignKey("MenuItemDescriptionID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItemOption", "MenuItemOptionDescription")
                        .WithMany("Description")
                        .HasForeignKey("MenuItemOptionDescriptionID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItemOption", "MenuItemOptionName")
                        .WithMany("Name")
                        .HasForeignKey("MenuItemOptionNameID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItemOptionValue", "MenuItemOptionValueName")
                        .WithMany("Name")
                        .HasForeignKey("MenuItemOptionValueNameID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItem", "MenuItemTitle")
                        .WithMany("Title")
                        .HasForeignKey("MenuItemTitleID")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("MenuCategoryDescription");

                    b.Navigation("MenuCategoryTitle");

                    b.Navigation("MenuItemDescription");

                    b.Navigation("MenuItemOptionDescription");

                    b.Navigation("MenuItemOptionName");

                    b.Navigation("MenuItemOptionValueName");

                    b.Navigation("MenuItemTitle");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItem", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOption", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuItem", null)
                        .WithMany("Options")
                        .HasForeignKey("MenuItemID");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOptionValue", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuItemOption", "MenuItemOption")
                        .WithMany("Values")
                        .HasForeignKey("MenuItemOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItemOption");
                });

            modelBuilder.Entity("UOrders.EFModel.Order", b =>
                {
                    b.HasOne("UOrders.EFModel.UOrdersUser", "OrderedBy")
                        .WithMany("Orders")
                        .HasForeignKey("OrderedById");

                    b.Navigation("OrderedBy");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderItem", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UOrders.EFModel.Order", "Order")
                        .WithMany("OrderedItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderItemCheckedOption", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuItemOptionValue", "OptionValue")
                        .WithMany()
                        .HasForeignKey("OptionValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UOrders.EFModel.OrderItem", "OrderItem")
                        .WithMany("CheckedOptions")
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OptionValue");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderReview", b =>
                {
                    b.HasOne("UOrders.EFModel.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("UOrders.EFModel.Price", b =>
                {
                    b.HasOne("UOrders.EFModel.MenuItemOptionValue", "MenuItemOptionValue")
                        .WithMany("PriceChangeToBase")
                        .HasForeignKey("MenuItemOptionValuePrice")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("UOrders.EFModel.MenuItem", "MenuItem")
                        .WithMany("Prices")
                        .HasForeignKey("MenuItemPrice")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("MenuItem");

                    b.Navigation("MenuItemOptionValue");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuCategory", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("Items");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItem", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("Options");

                    b.Navigation("Prices");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOption", b =>
                {
                    b.Navigation("Description");

                    b.Navigation("Name");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("UOrders.EFModel.MenuItemOptionValue", b =>
                {
                    b.Navigation("Name");

                    b.Navigation("PriceChangeToBase");
                });

            modelBuilder.Entity("UOrders.EFModel.Order", b =>
                {
                    b.Navigation("OrderedItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("UOrders.EFModel.OrderItem", b =>
                {
                    b.Navigation("CheckedOptions");
                });

            modelBuilder.Entity("UOrders.EFModel.UOrdersUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
