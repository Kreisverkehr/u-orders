name: .NET

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: src/**
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./src/UOrders.sln
    - name: Build
      run: dotnet build ./src/UOrders.sln --no-restore
    - name: Publish
      run: dotnet publish ./src/UOrders.sln -c Release -p:PublishDir=./publish
    - name: Copy build artifacts to staging
      run: |
       mkdir -p ./staging/UOrders.Api
       cp -r ./src/UOrders.Api/publish/* ./staging/UOrders.Api/ 
       mkdir -p ./staging/UOrders.Service
       cp -r ./src/UOrders.Service/publish/* ./staging/UOrders.Service/ 
       mkdir -p ./staging/UOrders.PrintService
       cp -r ./src/UOrders.PrintService/publish/* ./staging/UOrders.PrintService/ 
       mkdir -p ./staging/UOrders.WebUI
       cp -r ./src/UOrders.WebUI/publish/* ./staging/UOrders.WebUI/
    - name: Remove unwanted files
      run: |
       find ./staging -type f -name '*.pdb' -exec rm {} +
       rm ./staging/UOrders.Api/UOrders.Api
       rm ./staging/UOrders.Service/UOrders.Service
       rm ./staging/UOrders.PrintService/UOrders.PrintService
    - name: Zip Output
      run: 7z a -tzip ${{ github.event.repository.name }}-edge.zip ./staging/*
    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: publish-output
        path: ${{ github.workspace }}/${{ github.event.repository.name }}-edge.zip
        retention-days: 1

  init-docker-builds:
    runs-on: ubuntu-latest
    outputs:
      docker-repo: ${{ steps.repo.outputs.lowercase }}
    steps:
    - id: repo
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ github.repository }}

# Tag pattern: latest-{tag}-{type}-{archtag}
  build-docker:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    needs: [init-docker-builds, build]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2022]
        project: [UOrders.Api, UOrders.Service, UOrders.PrintService, UOrders.WebUI]
        arch: [amd64, arm64, arm/v7]
        dockerfile: [Dockerfile.ci]
        include:
          - project: UOrders.Api
            tag: api
          - project: UOrders.Service
            tag: service
          - project: UOrders.PrintService
            tag: print
          - project: UOrders.WebUI
            tag: web
          - os: windows-2022
            type: windows
            ostag: win2022
          - os: ubuntu-latest
            type: linux
            ostag: linux
          - arch: amd64
            archtag: x64
          - arch: arm64
            archtag: arm64
          - arch: arm/v7
            archtag: arm
          - os: windows-2022
            ostag: win2022
            project: UOrders.WebUI
            arch: amd64
            type: windows
            tag: web
            archtag: x64
            dockerfile: Dockerfile.ci.win
        exclude:
          - os: windows-2022
            arch: arm64
          - os: windows-2022
            arch: arm/v7
          - os: windows-2022
            project: UOrders.WebUI
            dockerfile: Dockerfile.ci
    steps:
    - name: Login to Registry
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    - run: |
       echo os ${{ matrix.os}}
       echo project ${{ matrix.project}}
       echo arch ${{ matrix.arch}}
       echo type ${{ matrix.type}}
       echo archtag ${{ matrix.archtag}}
       echo dockerfile ${{ matrix.dockerfile}}
    - uses: actions/checkout@v4
    - name: Download portable build
      uses: actions/download-artifact@v4
      with:
        name: publish-output
    - name: Extract binaries for container
      run: |
       7z x ${{ github.event.repository.name }}-edge.zip ${{ matrix.project }}/* -oapp/
       mv ./app/${{ matrix.project }}/* ./app
    - name: Set up QEMU
      if: runner.os != 'windows'
      id: qemu
      uses: docker/setup-qemu-action@v3
      with:
        image: tonistiigi/binfmt:latest
        platforms: ${{ matrix.type }}/${{ matrix.arch }}
    - name: Build docker image
      run: docker build -t ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-${{ matrix.ostag }}-${{ matrix.archtag }} -f ./src/${{ matrix.project }}/${{ matrix.dockerfile }} --platform ${{ matrix.type }}/${{ matrix.arch }} .
    - name: Push docker image
      if: github.event_name != 'pull_request'
      run: docker push ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-${{ matrix.ostag }}-${{ matrix.archtag }}
  
  update-latest-tags:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    needs: [build-docker, init-docker-builds]
    strategy:
      matrix:
        tag: [api, service, print, web]
    steps:
    - name: Login to Registry
      uses: docker/login-action@v3
      with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    - name: Create docker manifest
      run: |
        docker manifest create ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge \
          ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-win2022-x64 \
          ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-linux-x64 \
          ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-linux-arm64 \
          ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge-linux-arm
    - name: Push manifest
      if: github.event_name != 'pull_request'
      run: |
        docker manifest push ghcr.io/${{ needs.init-docker-builds.outputs.docker-repo }}:${{ matrix.tag }}-edge
